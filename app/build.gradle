plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

import javax.crypto.Cipher
import java.security.KeyPair
import java.security.KeyPairGenerator
import java.security.PrivateKey
import java.security.PublicKey
import org.json.JSONObject

PrivateKey privateKey
PublicKey publicKey

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.playcontacts"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
    // glide load images
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'
    // maps
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
}

tasks.register("aaa") {
    it.doFirst {
        // exec {
        System.out.println("Fi")

        KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA")
        generator.initialize(1024)
        KeyPair pair = generator.generateKeyPair()
        privateKey = pair.getPrivate()
        publicKey = pair.getPublic()

        FileReader fr = new FileReader("app/src/main/assets/testJs.json")
        int character;
        String text = "";

        while ((character = fr.read()) != -1) {
            text += (char) character
        }
        fr.close();
        System.out.println("text is " + text)
        JSONObject json = new JSONObject(text)
        String word = json.get("key")

        String encryptedMessage = encrypt(word, publicKey);
        System.err.println("Encrypted:\n"+encryptedMessage);
        FileWriter fw = new FileWriter("app/src/main/assets/testJs.json")
        fw.write(encryptedMessage)
        fw.close()

        project(":app").tasks.getByName("assembleDebug").doLast {
            Thread.sleep(10000)
            System.out.println("bl")
            String decryptedMessage = decrypt(encryptedMessage, privateKey);
            System.err.println("Decrypted:\n"+decryptedMessage);
            FileWriter fw2 = new FileWriter("app/src/main/assets/testJs.json")
            fw2.write(decryptedMessage)
            fw2.close()
        }
    }
}

static def encode(byte[] data) {
    return Base64.getEncoder().encodeToString(data)
}

static def encrypt(String message, PublicKey pk) {
    byte[] messageToBytes = message.getBytes()
    Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding")
    cipher.init(Cipher.ENCRYPT_MODE, pk)
    byte[] encryptedBytes = cipher.doFinal(messageToBytes)
    return encode(encryptedBytes)
}

static String decrypt(String encryptedMessage, PrivateKey pk) {
    byte[] encryptedBytes = decode(encryptedMessage)
    Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding")
    cipher.init(Cipher.DECRYPT_MODE, pk)
    byte[] decryptedMessage = cipher.doFinal(encryptedBytes)
    return new String(decryptedMessage, "UTF8")
}

static byte[] decode(String data) {
    return Base64.getDecoder().decode(data)
}

project(":app").tasks.preBuild.dependsOn("aaa")